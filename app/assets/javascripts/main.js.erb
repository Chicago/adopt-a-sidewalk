$(function() {
  var center = new google.maps.LatLng(41.88, -87.67);
  var zoomLevel = 12;
  var mapOptions = {
    center: center,
    mapTypeControl: true,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControl: true,
    zoom: zoomLevel
  };
  
  var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
  var widgetStatus = 0;
  var isWindowOpen = false;
  var sidewalks_kml;
  var autoIWObjectId;
  var activeObjectId;
  var activeInfoWindow = new google.maps.InfoWindow({
    maxWidth: 950
  });
  
  google.maps.event.addListener(activeInfoWindow, 'closeclick', function() {
    isWindowOpen = false;
  });
  
  google.maps.event.addListener(map, 'dragend', function() {
    if(isWindowOpen == true) {
      return;
    }
    refreshKML();
  });
  
  window.osw_widget = new OhSoWe.MapWidget({
    version: "0.1",
    partnerId: "snowflake",
    container: "osw_widget",
    miniWidgetStyle: 'noText', //'default' or 'noText'
    onReady: function(widget) {
      //set the initial bounds
      widget.boundsChanged(map.getBounds().toUrlValue());
      //set the google maps listener
      google.maps.event.addListener(map, 'bounds_changed', function() {
        //console.debug('bounds_changed');
        widget.boundsChanged(map.getBounds().toUrlValue());
      });
    }
  }).render();  
  
  function refreshKML() {
    var c = map.getCenter();
    console.log("Rendering sidewalks of [%s, %s]", c.lat(), c.lng());
    var url = 'http://167.165.233.18/sidewalks.kml?lat=' + c.lat() + '&lng=' + c.lng() + '&r=' + (new Date()).valueOf();

    if (sidewalks_kml != undefined) {
      sidewalks_kml.setMap(null);
    }
    sidewalks_kml = new google.maps.KmlLayer(url,
                                             {suppressInfoWindows: true,
                                              suppressMapPan: false,
                                              preserveViewport: true,
                                              map: map});
    map.setZoom(19);

    google.maps.event.addListener(sidewalks_kml, 'click', function(e) {
      isWindowOpen = true;
      activeObjectId = e.featureData.description;
      //console.debug("Fetched KML: %s", JSON.stringify(e.featureData));
      fetchSidewalkInfo(activeObjectId, e.latLng);
    });
  }

  function fetchSidewalkInfo(gid, pos) {
    if (pos == undefined)
      pos = map.getCenter();
    //console.info(e.latLng);
    $.ajax({
      type: 'GET',
      url: '/sidewalk_claims/' + gid,
      data: {
        //'id': activeObjectId
      },
      error: function(jqXHR) {
      },
      success: function(data) {
        activeInfoWindow.setOptions({
          content: data,
          position: pos,
        });
        activeInfoWindow.open(map);
      }
    });
  }
  
  function updateSidebar() {
    $.ajax({
      type: 'GET',
      url: '/',
      dataType: 'json',
      error: function(jqXHR) {
        //console.error(jqXHR);
      },
      success: function(data) {
        //console.info(data);
        $('#username').replaceWith(data['user_badge']);
        $('#sidewalk_list').replaceWith(data['sidewalk_list']);
      }
    });
  }
  
  function showInfoWindow() {
    $('#info_window').show();
  }
  
  function hideInfoWindow() {
    $('#info_window').hide();
  }
  
  function showSpinner() {
    $('#spinner').show();
  }
  
  function hideSpinner() {
    $('#spinner').hide();
  }
  
  $('#address_form').submit(function() {
    var submitButton = $("input[type='submit']", this);
    var errors = [];
    var uaddress = $('#address');
    
    $(submitButton).attr("disabled", true);
    if(uaddress.val() === '') {
      $(submitButton).attr("disabled", false);
      markError(uaddress, errors);
      uaddress.focus();
    } else {
      $.ajax({
        type: 'GET',
        url: '/address.json',
        data: {
          'commit': submitButton.val(),
          'utf8': '✓',
          'city_state': $('#city_state').val(),
          'address': uaddress.val()
        },
        success: function(data) {
          console.log("returned address data: %o", data)
          $(submitButton).attr("disabled", false);
          if(data.errors) {
            markError(uaddress, errors);
            uaddress.focus();
          } else {
            map.setCenter(new google.maps.LatLng(data[0], data[1]));
            refreshKML();
            if (autoIWObjectId) {
              fetchSidewalkInfo(autoIWObjectId);
              isWindowOpen = true;
              autoIWObjectId = null;
            }
          }
        }
      });
    }
    return false;
  });

  $('#sign_up_form').live('submit', function() {
    var submitButton = $("input[type='submit']", this);
    var uemail = $('#user_email');
    var ufname = $('#user_first_name');
    var ulname = $('#user_last_name');
    var upwd = $('#user_password');
    var errors = [];
    
    $(submitButton).attr("disabled", true);
    if(ufname.val() === '') {
      markError(ufname, errors);
    } else {
      unmarkError(ufname);
    }
    if(ulname.val() === '') {
      markError(ulname, errors);
    } else {
      unmarkError(ulname);
    }
    if(!/[\w\.%\+\]+@[\w\]+\.+[\w]{2,}/.test(uemail.val())) {
      markError(uemail, errors);
    } else {
      unmarkError(uemail);
    }
    if(upwd.val().length < 6 || upwd.val().length > 20) {
      markError(upwd, errors);
    } else {
      unmarkError(upwd);
    }
    if(errors.length > 0) {
      $(submitButton).attr("disabled", false);
      errors[0].focus();
    } else {
      $.ajax({
        type: 'POST',
        url: '/users.json',
        data: {
          'commit': submitButton.val(),
          'utf8': '✓',
          'authenticity_token': $('input[name="authenticity_token"]', this).val(),
          'user': {
            'email': uemail.val(),
            'first_name': ufname.val(),
            'last_name': ulname.val(),
            'password': upwd.val()
          }
        },
        beforeSend: function() {
        },
        error: function(jqXHR) {
          data = $.parseJSON(jqXHR.responseText);
          hideSpinner();
          showInfoWindow();
          $(submitButton).attr("disabled", false);
          if (data.html) {
            activeInfoWindow.setContent(data.html);
            $.globalEval($(data.html)[3].text);
          }
        },
        success: function(data) {
          updateSidebar();
          fetchSidewalkInfo(activeObjectId);
        }
      });
    }
    return false;
  });
    
  $('#sign_in_form').live('submit', function() {
    var submitButton = $("input[type='submit']", this);
    var uemail = $('#user_email');
    var upwd = $('#user_password');
    var errors = [];

    if(!/[\w\.%\+\]+@[\w\]+\.+[\w]{2,}/.test(uemail.val())) {
      markError(uemail, errors);
    } else {
      unmarkError(uemail);
    }
    if(upwd.val().length < 6 || upwd.val().length > 20) {
      markError(upwd, errors);
    } else {
      unmarkError(upwd);
    }
    if(errors.length > 0) {
      $(submitButton).attr("disabled", false);
      errors[0].focus();
    } else {
      $.ajax({
        type: 'POST',
        url: '/users/sign_in.json',
        data: {
          'commit': submitButton.val(),
          'utf8': '✓',
          'authenticity_token': $('input[name="authenticity_token"]', this).val(),
          'user': {
            'email': uemail.val(),
            'password': upwd.val(),
            'remember_me': $('#user_remember_me').val()
          }
        },
        beforeSend: function() {
        },
        error: function(jqXHR) {
          data = $.parseJSON(jqXHR.responseText);
          $(submitButton).attr("disabled", false);
          $('#error_msg').html('<h2>'+data.errors.password+'</h2>');
          uemail.focus();
        },
        success: function(data) {
          updateSidebar();
          fetchSidewalkInfo(activeObjectId);
        }
      });
    }
    return false;
  });
    
    
  $('#user_forgot_password_link').live('submit', function() {
    var submitButton = $("input[type='submit']", this);
    var uemail = $('#user_email');
    var errors = [];

    if(!/[\w\.%\+\]+@[\w\]+\.+[\w]{2,}/.test(uemail.val())) {
      markError(uemail, errors);
    } else {
      unmarkError(uemail);
    }

    if(errors.length > 0) {
      $(submitButton).attr("disabled", false);
      errors[0].focus();
    } else {
      $.ajax({
        type: 'POST',
        url: '/users/password.json',
        data: {
          'commit': submitButton.val(),
          'utf8': '✓',
          'authenticity_token': $('input[name="authenticity_token"]', this).val(),
          'user': {
            'email': uemail.val()
          }
        },
        beforeSend: function() {
          hideInfoWindow();
          showSpinner();
        },
        error: function(jqXHR) {
          hideSpinner();
          showInfoWindow();
          $(submitButton).attr("disabled", false);
          markError(uemail, errors);
          uemail.focus();
        },
        success: function() {
          $.ajax({
            type: 'GET',
            url: '/users/sign_in',
            data: {
              'user': {
                'email': uemail.val()
              },
              'flash': {
                'notice': "<%= I18n.t("notices.password_reset") %>"
              }
            },
            success: function(data) {
              activeInfoWindow.setContent(data);
            }
          });
        }
      });
    }
    return false;
  });
  
  $('#abandon_link').live('click', function() {
    if (window.confirm('Are you sure that you want to abandon this sidewalk?')) {    
      $.ajax({
        type: 'POST',
        url: '/sidewalk_claims/' + $(this).attr('data-moid'),
        data: { 'gid': activeObjectId,
                'authenticity_token': AUTH_TOKEN,
                '_method': 'delete' },
        error: function(jqXHR) {
          console.error(jqXHR);
        },
        success: function(data) {
          //console.info("abandoned");
          refreshKML();
          updateSidebar();
          activeInfoWindow.setContent(data);
        }
      });
    }
    return false;
  });
  
  $('#adopt_link').live('click', function() {
    var publish = window.confirm('Would you also like to publish that you have adopted sidewalk as your Facebook status?')
    $.ajax({
      type: 'POST',
      url: '/sidewalk_claims',
      data: { 'gid': activeObjectId,
              'authenticity_token': AUTH_TOKEN,
              'fb_publish': publish },
      error: function(jqXHR) {
        console.error(jqXHR);
      },
      success: function(data) {
        //console.info("adopted");
        refreshKML();
        updateSidebar();
        activeInfoWindow.setContent(data);
      }
    });
    return false;
  });
  
  $('#get_help_link').live('click', function() {
    var publish = window.confirm('Would you also like to inform that this sidewalk needs help on your Facebook status?')
    $.ajax({
      type: 'POST',
      url: '/sidewalks/' + activeObjectId,
      data: { 'authenticity_token': AUTH_TOKEN,
              '_method': 'put',
              'need_help': true,
              'fb_publish': publish },
      error: function(jqXHR) {
        console.error(jqXHR);
      },
      success: function(data) {
        refreshKML();
        updateSidebar();
        activeInfoWindow.setContent(data);
      }
    });
    return false;
  });
  
  $('#shoveled_link').live('click', function() {
    var publish = window.confirm('Would you also like to publish that you have shoveled this sidewalk as your Facebook status?')
    $.ajax({
      type: 'POST',
      url: '/sidewalks/' + activeObjectId,
      data: { 'moid': $(this).attr('data-moid'),
              'authenticity_token': AUTH_TOKEN,
              '_method': 'put',
              'shoveled': true,
              'fb_publish': publish },
      error: function(jqXHR) {
        console.error(jqXHR);
      },
      success: function(data) {
        refreshKML();
        updateSidebar();
        activeInfoWindow.setContent(data);
      }
    });
    return false;
  });
  
  $('#snowed_link').live('click', function() {
    $.ajax({
      type: 'POST',
      url: '/sidewalks/' + activeObjectId,
      data: { 'moid': $(this).attr('data-moid'),
              'authenticity_token': AUTH_TOKEN,
              '_method': 'put',
              'shoveled': false },
      error: function(jqXHR) {
        console.error(jqXHR);
      },
      success: function(data) {
        refreshKML();
        updateSidebar();
        activeInfoWindow.setContent(data);
      }
    });
    return false;
  });
  
  $('#sign_in_link').live('click', function() {
    $.ajax({
      type: 'GET',
      url: '/users/sign_in',
      success: function(data) {
        activeInfoWindow.setContent(data);
      }
    });
    return false;
  });
  
  $('#sign_up_link').live('click', function() {
    $.ajax({
      type: 'GET',
      url: '/users/sign_up',
      dataType: 'html',
      success: function(data) {
        activeInfoWindow.setContent(data);
        //$.globalEval($(data)[3].text);
        eval($(data)[3].text);
        FB.XFBML.parse();
      }
    });
    return false;
  });
  
  //$('#facebook_button').live('click', function() {
  //  $.ajax({
  //    type: 'GET',
  //    url: '/auth/facebook',
  //    error: function(jqXHR) {
  //      console.error($.parseJSON(jqXHR.responseText));
  //    },
  //    success: function(data) {
  //      updateSidebar();
  //      fetchSidewalkInfo(activeObjectId);
  //    }
  //  });
  //  return false;
  //});
  
  $('a.view_sidewalk').live('click', function() {
    autoIWObjectId = $(this).attr('data-gid');
    activeObjectId = $(this).attr('data-gid');
    $('#address').val($(this).text());
    $('#address_button').trigger('click');
    return false;
  });
  
  $('#share_link').live('click', function() {
    if (widgetStatus == 0) {
      window.osw_widget.showDetails();
      widgetStatus = 1;
    } else {
      window.osw_widget.minimize();
      widgetStatus = 0;
    }
    return false;
  });

  $('#refresh_link').live('click', function() {
    refreshKML();
    return false;
  });

  $('#notice').live('click', function() {
    $(this).fadeOut('slow');
  });
  
  $('#error').live('click', function() {
    $(this).fadeOut('slow');
  });
  
  function markError(i, e) {
    e.push(i);
    $(i).addClass('error', 500).prevAll('label:first').addClass('error', 500);
  }
  
  function unmarkError(i) {
    $(i).removeClass('error').prevAll('label:first').removeClass('error');
  }
  
  
});
